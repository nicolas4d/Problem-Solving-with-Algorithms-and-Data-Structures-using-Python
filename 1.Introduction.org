* 1.1. Objectives
* 1.2. Getting Started
* 1.3. What Is Computer Science?
  Computer science is the study of problems, problem-solving, and the solutions
  that come out of the problem-solving process. Algorithms are finite processes
  that if followed will solve the problem. Algorithms are solutions.

  Computer science can be thought of as the study of *algorithms*.

  It is also very common to include the word *computable* when describing
  problems and solutions.

  Computer science, as it pertains to the problem-solving process itself, is
  also the study of *abstraction*. Abstraction allows us to view the problem and
  solution in such a way as to separate the so-called logical and physical
  perspectives.

  [[file:figure/Figure%201:%20Procedural%20Abstraction.png][Procedural Abstraction]]
* 1.4. What Is Programming?
  *Programming* is the process of taking an algorithm and encoding it into a
  notation, a programming language, so that it can be executed by a computer.

  *data type* also provides a description of the operations that the data items
  can participate in.
* 1.5. Why Study Data Structures and Abstract Data Types?
  An *abstract data type*, sometimes abbreviated *ADT*, is a logical description
  of how we view the data and the operations that are allowed without regard to
  how they will be implemented. This means that we are concerned only with what
  the data is representing and not with how it will eventually be constructed.
  By providing this level of abstraction, we are creating an *encapsulation*
  around the data. The idea is that by encapsulating the details of the
  implementation, we are hiding them from the user’s view. This is called
  *information hiding*.

  [[file:figure/Figure%202:%20Abstract%20Data%20Type.png][Abstract Data Type]]

  The implementation of an abstract data type, often referred to as a *data
  structure*, will require that we provide a physical view of the data using
  some collection of programming constructs and primitive data types. This
  provides an *implementation-independent* view of the data.
* 1.6. Why Study Algorithms?
  *Computer scientists learn by experience. We learn by seeing others solve
  problems and by solving problems by ourselves.* Being exposed to different
  problem-solving techniques and seeing how different algorithms are designed
  helps us to take on the next challenging problem that we are given. By
  considering a number of different algorithms, we can begin to develop pattern
  recognition so that the next time a similar problem arises, we are better able
  to solve it.
* 1.7. Review of Basic Python
  #+begin_src python
  print("Algorithms and Data Structures")
  #+end_src
* 1.8. Getting Started with Data
** ^
   we define a *class* to be a description of what the data look like (the
   state) and what the data can do (the behavior). Classes are analogous to
   abstract data types because a user of a class only sees the state and
   behavior of a data item. *Data items* are called *objects* in the
   object-oriented paradigm. An object is an instance of a class.
** 1.8.1. Built-in Atomic Data Types
   Python has two main built-in numeric classes that implement the integer and
   floating point data types. These Python classes are called int and float.

   [[file:example/numeric.py]]

   The boolean data type, implemented as the Python bool class, will be quite
   useful for representing truth values. 

   [[file:example/boolean.py]]

   Identifiers are used in programming languages as names.

   file:example/identifiers.py

   [[file:figure/Figure%203:%20Variables%20Hold%20References%20to%20Data%20Objects.png][Variables Hold References to Data Objects]]
   [[file:figure/Figure%204:%20Assignment%20Changes%20the%20Reference.png][Assignment Changes the Reference]]
** 1.8.2. Built-in Collection Data Types
   file:example/collectionDataTypes.py

   Lists, strings, and tuples are *ordered collections* that are very similar in
   general structure but have specific differences that must be understood for
   them to be used properly. Sets and dictionaries are *unordered collections*.

   A list is an ordered collection of zero or more references to Python data
   objects.

   One very important aside relating to the repetition operator is that the
   result is a repetition of references to the data objects in the sequence.

   Strings are sequential collections of zero or more letters, numbers and other
   symbols.

   A major difference between lists and strings is that lists can be modified
   while strings cannot. This is referred to as *mutability*. Lists are mutable;
   strings are *immutable*.

   Tuples are very similar to lists in that they are heterogeneous sequences of
   data. The difference is that a tuple is immutable, like a string. A tuple
   cannot be changed. Tuples are written as comma-delimited values enclosed in
   parentheses.

   A set is an unordered collection of zero or more immutable Python data
   objects. Sets do not allow duplicates and are written as comma-delimited
   values enclosed in curly braces. The empty set is represented by set().

   Our final Python collection is an unordered structure called a dictionary.
   Dictionaries are collections of associated pairs of items where each pair
   consists of a key and a value. This key-value pair is typically written as
   key:value. Dictionaries are written as comma-delimited key:value pairs
   enclosed in curly braces.

   It is important to note that the dictionary is maintained in no particular
   order with respect to the keys.
* 1.9. Input and Output
** ^
   input
** 1.9.1. String Formatting
   [[file:code/stringFormatting.py]]
   
   The % operator is a string operator called the *format operator*
* 1.10. Control Structures
  algorithms require two important control structures: iteration and selection.

  For iteration, Python provides a standard *while* statement and a very
  powerful *for* statement.

  if elif else

  list comprehension:
  - sqlist=[x*x for x in range(1,11)]
* 1.11. Exception Handling
  There are two types of errors that typically occur when writing programs.

  first, known as a syntax error, simply means that the programmer has made a
  mistake in the structure of a statement or expression.

  The other type of error, known as a logic error, denotes a situation where the
  program executes but gives the wrong result. These types of *runtime errors*
  are typically called *exceptions*.

  When an exception occurs, we say that it has been *raised*. You can “handle”
  the exception that has been raised by using a *try* statement.
  [[file:code/exceptionHandling.py]]
* 1.12. Defining Functions
  [[file:code/definingFunctions.py]]
* 1.13. Object-Oriented Programming in Python: Defining Classes
** ^
   One of the most powerful features in an object-oriented programming language
   is the ability to allow a programmer (problem solver) to create new classes
   that model data that is needed to solve the problem.

   Remember that we use abstract data types to provide the logical description
   of what a data object looks like (its state) and what it can do (its
   methods). By building a class that implements an abstract data type, a
   programmer can take advantage of the abstraction process and at the same time
   provide the details necessary to actually use the abstraction in a program.
   Whenever we want to implement an abstract data type, we will do so with a new
   class.
** 1.13.1. A Fraction Class
   [[file:listing/fraction.py]]
   [[file:code/fraction.py]]

   [[file:figure/Figure%205:%20An%20Instance%20of%20the%20Fraction%20Class.png][An Instance of the Fraction Class]]

   Assume we have two Fraction objects, f1 and f2. f1==f2 will only be True if
   they are references to the same object. Two different objects with the same
   numerators and denominators would not be equal under this implementation.
   This is called *shallow equality*.

   *deep equality*, equality by the same value, not the same reference.
** 1.13.2. Inheritance: Logic Gates and Circuits
   *Inheritance* is the ability for one class to be related to another class in
   much the same way that people can be related to one another. Python child
   classes can inherit characteristic data and behavior from a parent class.
   These classes are often referred to as *subclasses* and *superclasses*.

   [[file:figure/Figure%208:%20An%20Inheritance%20Hierarchy%20for%20Python%20Collections.png][An Inheritance Hierarchy for Python Collections]]

   [[file:figure/Figure%209:%20Three%20Types%20of%20Logic%20Gates.png][Three Types of Logic Gates]]

   [[file:figure/Figure%2011:%20An%20Inheritance%20Hierarchy%20for%20Logic%20Gates.png][An Inheritance Hierarchy for Logic Gates]]

   [[file:listing/logicGate.py]]
   [[file:code/logicGate.py]]

   Python also has a function called super which can be used in place of
   explicitly naming the parent class.
   #+begin_src python
   LogicGate.__init__(self, n)

   super(UnaryGate, self).__init__(n).
   #+end_src

   [[file:figure/Figure%2012:%20A%20Connector%20Connects%20the%20Output%20of%20One%20Gate%20to%20the%20Input%20of%20Another.png][A Connector Connects the Output of One Gate to the Input of Another]]

   - the IS-A relationship (which requires inheritance)
   - have HAS-A relationships (with no inheritance).
* 1.14. Summary
  - Computer science is the study of problem solving.
  - Computer science uses abstraction as a tool for representing both processes
    and data.
  - Abstract data types allow programmers to manage the complexity of a problem
    domain by hiding the details of the data.
  - Python is a powerful, yet easy-to-use, object-oriented language.
  - Lists, tuples, and strings are built in Python sequential collections.
  - Dictionaries and sets are nonsequential collections of data.
  - Classes allow programmers to implement abstract data types.
  - Programmers can override standard methods as well as create new methods.
  - Classes can be organized into hierarchies.
  - A class constructor should always invoke the constructor of its parent
    before continuing on with its own data and behavior.
* 1.15. Key Terms
* 1.16. Discussion Questions
** 1
   学校 院 系 老师 学生
   行政老师
** 2
   bank account
   account for saving
   account for credit
** 3
   computer brands : thinkpad ...

   computer os :
   linux : ubuntu centos ...
   unix : mac ...
   window : win10 win7 ...
** 4
   ...
* 1.17. Programming Exercises
** 1, 2, 3, 4, 5, 6, 7
   [[file:code/fraction.py]]
** 8
   对于+号操作，可变对象和不可变对象调用的都是add操作
   对于+=号操作，可变对象调用add，不可变对象调用的是iadd(不可变对象没有iadd) iadd是原地修改
** 9
   函数str() 用于将值转化为适于人阅读的形式，而repr() 转化为供解释器读取的形式
   （如果没有等价的语法，则会发生SyntaxError 异常）， 适合开发和调试阶段使用。
** 10
   [[file:code/logicGate.py]]
** 11
   The most simple arithmetic circuit is known as the half-adder. Research the
   simple half-adder circuit. Implement this circuit.

   https://baike.baidu.com/item/半加器/7653973?fr=aladdin

   [[file:code/logicGate.py]]
** 12 
   Now extend that circuit and implement an 8 bit full-adder.
** 13
   The circuit simulation shown in this chapter works in a backward direction. In other words, given a circuit, the output is produced by working back through the input values, which in turn cause other outputs to be queried. This continues until external input lines are found, at which point the user is asked for values. Modify the implementation so that the action is in the forward direction; upon receiving inputs the circuit produces an output.
** 14
   Design a class to represent a playing card. Now design a class to represent a deck of cards. Using these two classes, implement a favorite card game.
** 15
   Find a Sudoku puzzle in the local newspaper. Write a program to solve the puzzle.   
* code
  [[file:code/fraction.py]]
  [[file:code/logicGate.py]]
