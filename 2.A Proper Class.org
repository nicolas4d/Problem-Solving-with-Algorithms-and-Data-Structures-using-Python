* 2.1. Writing a Proper Python Class
** ^
   following aspects of desiging a class that works well in the Python
   ecosystem.
   - Each class should have a *docstring* to provide some level of documentation
     on how to use the class.
   - Each class should have a __str__ magic method to give it a meaninigful
     string representation.
   - Each class should have a proper __repr__ magic method for representation in
     the interactive shell, the debugger, and other cases where string
     conversion does not happen.
   - Each class should be *comparable* so it can be sorted and meaningfully
     compared with other instances. At a minimum this means implementing __eq__
     and __lt__.
   - You should think about access control each instance variable. Which
     attributes do you want to make public, which attributes do you want to make
     read only, and which attributes do you want to control or do value checking
     on before you allow them to be changed.

   If the class is a *container* for other classes then there are some further
   considerations:
   - You should be able to find out how many things the container holds using
     *len*
   - You should be able to *iterate* over the items in the container.
   - You may want to allow users to access the items in the container using the
     *square bracket index notation*.
** 2.1.1. A Basic implementation of the MSDie class
   [[file:listing/msdie.py]]
* 2.2. Making your Class Comparable
* code
  [[file:code/msdie.py]]
